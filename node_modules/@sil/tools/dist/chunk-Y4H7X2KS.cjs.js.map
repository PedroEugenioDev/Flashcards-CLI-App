{"version":3,"sources":["../src/lib/default/array.ts","../src/lib/default/number.ts","../src/lib/default/strings.ts","../src/lib/default/style.ts"],"names":[],"mappings":";AAAO,IAAM,SAAS,CACpB,MAAc,GACd,OACA,WAAW,UACQ;AACnB,MAAI,SAAS,CAAC;AACd,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,WAAO,KAAK,KAAK;AAAA,EACnB;AACA,MAAI;AAAU,WAAO,OAAO,KAAK,EAAE;AAAA;AAC9B,WAAO;AACd;;;ACXO,IAAM,gBAAgB,CAAC,KAAa,gBAAwB,MAAM;AACvE,SAAO;AAAA,IACL,KAAK,MAAM,WAAW,MAAM,MAAM,aAAa,CAAC,IAAI,OAAO;AAAA,EAC7D,EAAE,QAAQ,aAAa;AACzB;;;ACJO,IAAM,YAAY,CAAC,OAAe,QAAwB;AAC/D,QAAM,QAAQ,IAAI,OAAO,IAAI,iBAAkB,QAAQ,IAAI;AAC3D,SAAO,MAAM,QAAQ,OAAO,EAAE;AAChC;AAEO,IAAM,mBAAmB,CAAC,OAAe,QAAwB;AACtE,QAAM,QAAQ,IAAI,OAAO,IAAI,mBAAoB,QAAQ,IAAI;AAC7D,QAAM,UAAU,MAAM,KAAK,KAAK;AAChC,SAAO,WAAW,QAAQ,SAAS,IAAI,QAAQ,CAAC,IAAI;AACtD;AAEO,IAAM,aAAa,CAAC,QAAgB,SAA2B;AACpE,QAAM,SAAS,CAAC;AAChB,MAAI,IAAI;AAER,SAAO,IAAI,OAAO,QAAQ;AACxB,QAAI,OAAO,UAAU,GAAG,IAAI,KAAK,MAAM,MAAM,MAAM;AACjD,aAAO,KAAK,CAAC;AACb,WAAK,KAAK;AAAA,IACZ,OAAO;AACL;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAEO,IAAM,WAAW,CAAC,QAAgB,MAAc,QAAwB;AAC7E,QAAM,SAAS,WAAW,QAAQ,IAAI;AACtC,SAAO,OAAO,GAAG;AACnB;;;AC9BO,IAAM,QAAN,MAAY;AAAA,EAGjB,YAAY,OAAe;AAF3B,iBAAgB;AAGd,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,IAAI,UAAkB,IAAI,WAAmB,IAAI;AAC/C,QAAI,KAAK,SAAS,IAAI;AACpB,aAAO;AAAA,IACT;AACA,WAAO,GAAG,KAAK,QAAQ,UAAU,KAAK,YAAY,KAChD,WAAW,KAAK,aAAa;AAAA,EAEjC;AACF","sourcesContent":["export const repeat = (\n  num: number = 1,\n  value: any,\n  toString = false\n): any[] | string => {\n  let values = [];\n  for (let i = 0; i < num; i++) {\n    values.push(value);\n  }\n  if (toString) return values.join(\"\");\n  else return values;\n};\n","export const toRoundNumber = (num: number, decimalPlaces: number = 2) => {\n  return Number(\n    Math.round(parseFloat(num + \"e\" + decimalPlaces)) + \"e-\" + decimalPlaces\n  ).toFixed(decimalPlaces);\n};\n","export const removeTag = (input: string, tag: string): string => {\n  const regex = new RegExp(`<${tag}(.*)>(.*)<\\/${tag}>`, \"gi\");\n  return input.replace(regex, \"\");\n};\n\nexport const getStringFromTag = (input: string, tag: string): string => {\n  const regex = new RegExp(`<${tag}(.*?)>(.+?)<\\/${tag}>`, \"gi\");\n  const matches = regex.exec(input);\n  return matches && matches.length > 1 ? matches[2] : \"\";\n};\n\nexport const getIndexes = (source: string, find: string): number[] => {\n  const result = [];\n  let i = 0;\n\n  while (i < source.length) {\n    if (source.substring(i, i + find.length) === find) {\n      result.push(i);\n      i += find.length;\n    } else {\n      i++;\n    }\n  }\n\n  return result;\n};\n\nexport const nthIndex = (source: string, find: string, nth: number): number => {\n  const result = getIndexes(source, find);\n  return result[nth];\n};\n","export class Style {\n  block: string = \"\";\n\n  constructor(block: string) {\n    this.block = block;\n  }\n  bem(element: string = \"\", modifier: string = \"\") {\n    if (this.block == \"\") {\n      return ``;\n    }\n    return `${this.block}${element ? `__${element}` : ``}${\n      modifier ? `--${modifier}` : ``\n    }`;\n  }\n}\n"]}