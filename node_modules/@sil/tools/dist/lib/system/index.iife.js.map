{"version":3,"sources":["../../../src/lib/system/file.ts","../../../src/lib/default/async.ts","../../../src/lib/system/path.ts","../../../src/lib/system/fs.ts"],"sourcesContent":["import { existsSync } from \"fs\";\nimport { dirname } from \"path\";\nimport { asyncEvery, asyncForEach, asyncSome } from \"../default/async\";\nconst { mkdir, readFile, access, writeFile, R_OK, F_OK, W_OK } =\n  require(\"fs\").promises;\n\nexport const createDir = async (dir: string): Promise<void> => {\n  try {\n    !existsSync(dir) && (await mkdir(dir, { recursive: true }));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getFileData = async (filePath: string): Promise<string> => {\n  try {\n    const file = await readFile(filePath).then((res: any) => res.toString());\n    return filePath.includes(\".json\") ? JSON.parse(file) : file;\n  } catch (err: any) {\n    throw Error(err);\n  }\n};\n\nexport const getJsonData = async (filePath: string): Promise<{}> => {\n  const data = await getFileData(filePath);\n  return JSON.parse(data);\n};\n\nexport const fileExists = async (path: string): Promise<boolean> => {\n  try {\n    await access(path, R_OK | W_OK | F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const filesExist = async (\n  paths: string[],\n  some = false\n): Promise<boolean> => {\n  const action = some ? asyncSome : asyncEvery;\n\n  try {\n    const result = await action(\n      paths,\n      async (file: string) => await fileExists(file)\n    );\n    return result;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const existingFiles = async (paths: string[]): Promise<string[]> => {\n  const existingPaths: string[] = [];\n  await asyncForEach(paths, async (path) => {\n    const exists = await fileExists(path);\n    if (exists) existingPaths.push(path);\n  });\n  return existingPaths;\n};\n\nexport const createFile = async (dest: string, data: string): Promise<void> => {\n  await mkdir(dirname(dest), { recursive: true });\n  await writeFile(dest, data);\n};\n","export async function asyncForEach<T>(\n  array: Array<T>,\n  callback: (item: T, index: number, og: T[]) => void\n): Promise<void> {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n}\n\nexport const hello = async (args: unknown = {}): Promise<unknown> => {\n  return args;\n};\n\nexport const promisify = async (func: any) => {\n  await Promise.resolve(func).then(function () {\n    return;\n  });\n};\n\nexport const asyncFilter = async (arr: any[], predicate: any) => {\n  const results = await Promise.all(arr.map(predicate));\n  return arr.filter((_v, index) => results[index]);\n};\nexport const asyncSome = async (arr: any[], predicate: any) =>\n  (await asyncFilter(arr, predicate)).length > 0;\nexport const asyncEvery = async (arr: any[], predicate: any) =>\n  (await asyncFilter(arr, predicate)).length === arr.length;\n","export const parentPath = (path: string, goBack = -1): string =>\n  path.split(\"/\").slice(0, goBack).join(\"/\");\n\nexport const renamePath = (ogLink: string, rename: string) => {\n  const pathGroup = ogLink.split(\"/\");\n  pathGroup[pathGroup.length - 2] = rename;\n  return pathGroup.join(\"/\").toLowerCase();\n};\n","const { mkdir, readFile, access, writeFile, createWriteStream, existsSync } =\n  require(\"fs\").promises;\n\nexport { mkdir, readFile, access, writeFile, createWriteStream, existsSync };\n"],"mappings":";;;;;;;;;;;AAAA,kBAA2B;AAC3B,oBAAwB;;;ACDxB,iBAAsB,aACpB,OACA,UACe;AACf,aAAS,QAAQ,GAAG,QAAQ,MAAM,QAAQ,SAAS;AACjD,YAAM,SAAS,MAAM,KAAK,GAAG,OAAO,KAAK;AAAA,IAC3C;AAAA,EACF;AAYO,MAAM,cAAc,OAAO,KAAY,cAAmB;AAC/D,UAAM,UAAU,MAAM,QAAQ,IAAI,IAAI,IAAI,SAAS,CAAC;AACpD,WAAO,IAAI,OAAO,CAAC,IAAI,UAAU,QAAQ,KAAK,CAAC;AAAA,EACjD;AACO,MAAM,YAAY,OAAO,KAAY,eACzC,MAAM,YAAY,KAAK,SAAS,GAAG,SAAS;AACxC,MAAM,aAAa,OAAO,KAAY,eAC1C,MAAM,YAAY,KAAK,SAAS,GAAG,WAAW,IAAI;;;ADvBrD,MAAM,EAAE,OAAO,UAAU,QAAQ,WAAW,MAAM,MAAM,KAAK,IAC3D,UAAQ,IAAI,EAAE;AAET,MAAM,YAAY,OAAO,QAA+B;AAC7D,QAAI;AACF,WAAC,sBAAW,GAAG,KAAM,MAAM,MAAM,KAAK,EAAE,WAAW,KAAK,CAAC;AAAA,IAC3D,SAAS,OAAP;AACA,cAAQ,MAAM,KAAK;AAAA,IACrB;AAAA,EACF;AAEO,MAAM,cAAc,OAAO,aAAsC;AACtE,QAAI;AACF,YAAM,OAAO,MAAM,SAAS,QAAQ,EAAE,KAAK,CAAC,QAAa,IAAI,SAAS,CAAC;AACvE,aAAO,SAAS,SAAS,OAAO,IAAI,KAAK,MAAM,IAAI,IAAI;AAAA,IACzD,SAAS,KAAP;AACA,YAAM,MAAM,GAAG;AAAA,IACjB;AAAA,EACF;AAEO,MAAM,cAAc,OAAO,aAAkC;AAClE,UAAM,OAAO,MAAM,YAAY,QAAQ;AACvC,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB;AAEO,MAAM,aAAa,OAAO,SAAmC;AAClE,QAAI;AACF,YAAM,OAAO,MAAM,OAAO,OAAO,IAAI;AACrC,aAAO;AAAA,IACT,QAAE;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAEO,MAAM,aAAa,OACxB,OACA,OAAO,UACc;AACrB,UAAM,SAAS,OAAO,YAAY;AAElC,QAAI;AACF,YAAM,SAAS,MAAM;AAAA,QACnB;AAAA,QACA,OAAO,SAAiB,MAAM,WAAW,IAAI;AAAA,MAC/C;AACA,aAAO;AAAA,IACT,SAAS,KAAP;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAEO,MAAM,gBAAgB,OAAO,UAAuC;AACzE,UAAM,gBAA0B,CAAC;AACjC,UAAM,aAAa,OAAO,OAAO,SAAS;AACxC,YAAM,SAAS,MAAM,WAAW,IAAI;AACpC,UAAI;AAAQ,sBAAc,KAAK,IAAI;AAAA,IACrC,CAAC;AACD,WAAO;AAAA,EACT;AAEO,MAAM,aAAa,OAAO,MAAc,SAAgC;AAC7E,UAAM,UAAM,qBAAQ,IAAI,GAAG,EAAE,WAAW,KAAK,CAAC;AAC9C,UAAM,UAAU,MAAM,IAAI;AAAA,EAC5B;;;AElEO,MAAM,aAAa,CAAC,MAAc,SAAS,OAChD,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,MAAM,EAAE,KAAK,GAAG;AAEpC,MAAM,aAAa,CAAC,QAAgB,WAAmB;AAC5D,UAAM,YAAY,OAAO,MAAM,GAAG;AAClC,cAAU,UAAU,SAAS,CAAC,IAAI;AAClC,WAAO,UAAU,KAAK,GAAG,EAAE,YAAY;AAAA,EACzC;;;ACPA,MAAM,EAAE,OAAAA,QAAO,UAAAC,WAAU,QAAAC,SAAQ,WAAAC,YAAW,mBAAmB,YAAAC,YAAW,IACxE,UAAQ,IAAI,EAAE;","names":["mkdir","readFile","access","writeFile","existsSync"]}