"use strict";
(() => {
  // src/lib/color/convert.ts
  var hexToRgb = (hex) => {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      red: parseInt(result[1], 16),
      green: parseInt(result[2], 16),
      blue: parseInt(result[3], 16)
    } : {
      red: 0,
      green: 0,
      blue: 0
    };
  };
  var componentToHex = (c) => {
    var hex = c.toString(16);
    return hex.length == 1 ? "0" + hex : hex;
  };
  var rgbToHex = (rgb) => {
    const cth = componentToHex;
    return `#${cth(rgb.red)}${cth(rgb.green)}${cth(rgb.blue)}`;
  };
  var hexToHsl = (hex) => {
    return rgbToHsl(hexToRgb(hex));
  };
  var RgbToLuminance = (rgb) => {
    return 0.299 * rgb.red + 0.587 * rgb.green + 0.114 * rgb.blue;
  };
  var HexToLuminance = (hex) => RgbToLuminance(hexToRgb(hex));
  var hslToHex = (hsl) => {
    hsl.lightness /= 100;
    const a = hsl.saturation * Math.min(hsl.lightness, 1 - hsl.lightness) / 100;
    const f = (n) => {
      const k = (n + hsl.hue / 30) % 12;
      const color = hsl.lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return Math.round(255 * color).toString(16).padStart(2, "0");
    };
    return `#${f(0)}${f(8)}${f(4)}`;
  };
  var rgbToHsl = (rgb) => {
    rgb.red /= 255, rgb.green /= 255, rgb.blue /= 255;
    const max = Math.max(rgb.red, rgb.green, rgb.blue);
    const min = Math.min(rgb.red, rgb.green, rgb.blue);
    let hue;
    let sat;
    let light = (max + min) / 2;
    if (max == min) {
      hue = sat = 0;
    } else {
      var d = max - min;
      sat = light > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case rgb.red:
          hue = (rgb.green - rgb.blue) / d + (rgb.green < rgb.blue ? 6 : 0);
          break;
        case rgb.green:
          hue = (rgb.blue - rgb.red) / d + 2;
          break;
        case rgb.blue:
          hue = (rgb.red - rgb.green) / d + 4;
          break;
      }
      if (hue)
        hue /= 6;
    }
    return { hue: hue || 0, saturation: sat, lightness: light };
  };

  // src/lib/color/mix.ts
  var mixHex = (colorA, colorB, amount) => {
    const colorA_array = colorA.match(/\w\w/g);
    const colorB_array = colorB.match(/\w\w/g);
    if (colorA_array == null || colorB_array == null)
      return "#000000";
    const [rA, gA, bA] = colorA_array.map((c) => parseInt(c, 16));
    const [rB, gB, bB] = colorB_array.map((c) => parseInt(c, 16));
    const rgb = {
      red: 0,
      green: 0,
      blue: 0
    };
    rgb.red = Math.round(rA + (rB - rA) * amount);
    rgb.green = Math.round(gA + (gB - gA) * amount);
    rgb.blue = Math.round(bA + (bB - bA) * amount);
    return rgbToHex(rgb);
  };
  var mixRGB = (colorA, colorB, amount) => {
    return hexToRgb(mixHex(rgbToHex(colorA), rgbToHex(colorB), amount));
  };
  var mixHSL = (colorA, colorB, amount) => {
    return hexToHsl(mixHex(hslToHex(colorA), hslToHex(colorB), amount));
  };
})();
//# sourceMappingURL=index.iife.js.map