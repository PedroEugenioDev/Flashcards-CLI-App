{"version":3,"sources":["../../../src/lib/color/convert.ts","../../../src/lib/color/mix.ts"],"sourcesContent":["import { Hex, HSL, RGB } from \"./color.model\";\n\nexport const hexToRgb = (hex: string): RGB => {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        red: parseInt(result[1], 16),\n        green: parseInt(result[2], 16),\n        blue: parseInt(result[3], 16),\n      }\n    : {\n        red: 0,\n        green: 0,\n        blue: 0,\n      };\n};\n\nexport const componentToHex = (c: number): Hex => {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n};\n\nexport const rgbToHex = (rgb: RGB): Hex => {\n  const cth = componentToHex;\n  return `#${cth(rgb.red)}${cth(rgb.green)}${cth(rgb.blue)}`;\n};\n\nexport const hexToHsl = (hex: Hex): HSL => {\n  return rgbToHsl(hexToRgb(hex));\n};\n\nexport const RgbToLuminance = (rgb: RGB): number => {\n  return 0.299 * rgb.red + 0.587 * rgb.green + 0.114 * rgb.blue;\n};\nexport const HexToLuminance = (hex: Hex): number =>\n  RgbToLuminance(hexToRgb(hex));\n\nexport const hslToHex = (hsl: HSL): Hex => {\n  hsl.lightness /= 100;\n  const a = (hsl.saturation * Math.min(hsl.lightness, 1 - hsl.lightness)) / 100;\n  const f = (n: number) => {\n    const k = (n + hsl.hue / 30) % 12;\n    const color = hsl.lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color)\n      .toString(16)\n      .padStart(2, \"0\");\n  };\n  return `#${f(0)}${f(8)}${f(4)}`;\n};\n\nexport const rgbToHsl = (rgb: RGB): HSL => {\n  (rgb.red /= 255), (rgb.green /= 255), (rgb.blue /= 255);\n  const max = Math.max(rgb.red, rgb.green, rgb.blue);\n  const min = Math.min(rgb.red, rgb.green, rgb.blue);\n\n  let hue;\n  let sat;\n  let light = (max + min) / 2;\n\n  if (max == min) {\n    hue = sat = 0; // achromatic\n  } else {\n    var d = max - min;\n    sat = light > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n    switch (max) {\n      case rgb.red:\n        hue = (rgb.green - rgb.blue) / d + (rgb.green < rgb.blue ? 6 : 0);\n        break;\n      case rgb.green:\n        hue = (rgb.blue - rgb.red) / d + 2;\n        break;\n      case rgb.blue:\n        hue = (rgb.red - rgb.green) / d + 4;\n        break;\n    }\n    if (hue) hue /= 6;\n  }\n\n  return { hue: hue || 0, saturation: sat, lightness: light };\n};\n","import { RGB, Hex, HSL } from \"./color.model\";\nimport { hexToHsl, hexToRgb, rgbToHex, hslToHex } from \"./convert\";\n\nexport const mixHex = (colorA: Hex, colorB: Hex, amount: number): string => {\n  const colorA_array = colorA.match(/\\w\\w/g);\n  const colorB_array = colorB.match(/\\w\\w/g);\n\n  if (colorA_array == null || colorB_array == null) return \"#000000\";\n\n  const [rA, gA, bA] = colorA_array.map((c) => parseInt(c, 16));\n  const [rB, gB, bB] = colorB_array.map((c) => parseInt(c, 16));\n\n  const rgb: RGB = {\n    red: 0,\n    green: 0,\n    blue: 0,\n  };\n\n  rgb.red = Math.round(rA + (rB - rA) * amount);\n  rgb.green = Math.round(gA + (gB - gA) * amount);\n  rgb.blue = Math.round(bA + (bB - bA) * amount);\n\n  return rgbToHex(rgb);\n};\nexport const mixRGB = (colorA: RGB, colorB: RGB, amount: number): RGB => {\n  return hexToRgb(mixHex(rgbToHex(colorA), rgbToHex(colorB), amount));\n};\n\nexport const mixHSL = (colorA: HSL, colorB: HSL, amount: number): HSL => {\n  return hexToHsl(mixHex(hslToHex(colorA), hslToHex(colorB), amount));\n};\n"],"mappings":"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","names":[]}