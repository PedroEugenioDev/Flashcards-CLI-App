"use strict";
(() => {
  // src/lib/default/array.ts
  var repeat = (num = 1, value, toString = false) => {
    let values = [];
    for (let i = 0; i < num; i++) {
      values.push(value);
    }
    if (toString)
      return values.join("");
    else
      return values;
  };

  // src/lib/default/async.ts
  async function asyncForEach(array, callback) {
    for (let index = 0; index < array.length; index++) {
      await callback(array[index], index, array);
    }
  }
  var hello = async (args = {}) => {
    return args;
  };
  var promisify = async (func) => {
    await Promise.resolve(func).then(function() {
      return;
    });
  };
  var asyncFilter = async (arr, predicate) => {
    const results = await Promise.all(arr.map(predicate));
    return arr.filter((_v, index) => results[index]);
  };
  var asyncSome = async (arr, predicate) => (await asyncFilter(arr, predicate)).length > 0;
  var asyncEvery = async (arr, predicate) => (await asyncFilter(arr, predicate)).length === arr.length;

  // src/lib/default/number.ts
  var toRoundNumber = (num, decimalPlaces = 2) => {
    return Number(
      Math.round(parseFloat(num + "e" + decimalPlaces)) + "e-" + decimalPlaces
    ).toFixed(decimalPlaces);
  };

  // src/lib/default/strings.ts
  var removeTag = (input, tag) => {
    const regex = new RegExp(`<${tag}(.*)>(.*)</${tag}>`, "gi");
    return input.replace(regex, "");
  };
  var getStringFromTag = (input, tag) => {
    const regex = new RegExp(`<${tag}(.*?)>(.+?)</${tag}>`, "gi");
    const matches = regex.exec(input);
    return matches && matches.length > 1 ? matches[2] : "";
  };
  var getIndexes = (source, find) => {
    const result = [];
    let i = 0;
    while (i < source.length) {
      if (source.substring(i, i + find.length) === find) {
        result.push(i);
        i += find.length;
      } else {
        i++;
      }
    }
    return result;
  };
  var nthIndex = (source, find, nth) => {
    const result = getIndexes(source, find);
    return result[nth];
  };

  // src/lib/default/style.ts
  var Style = class {
    constructor(block) {
      this.block = "";
      this.block = block;
    }
    bem(element = "", modifier = "") {
      if (this.block == "") {
        return ``;
      }
      return `${this.block}${element ? `__${element}` : ``}${modifier ? `--${modifier}` : ``}`;
    }
  };
})();
//# sourceMappingURL=index.iife.js.map