// src/lib/default/async.ts
async function asyncForEach(array, callback) {
  for (let index = 0; index < array.length; index++) {
    await callback(array[index], index, array);
  }
}
var hello = async (args = {}) => {
  return args;
};
var promisify = async (func) => {
  await Promise.resolve(func).then(function() {
    return;
  });
};
var asyncFilter = async (arr, predicate) => {
  const results = await Promise.all(arr.map(predicate));
  return arr.filter((_v, index) => results[index]);
};
var asyncSome = async (arr, predicate) => (await asyncFilter(arr, predicate)).length > 0;
var asyncEvery = async (arr, predicate) => (await asyncFilter(arr, predicate)).length === arr.length;

export {
  asyncForEach,
  hello,
  promisify,
  asyncFilter,
  asyncSome,
  asyncEvery
};
//# sourceMappingURL=chunk-FLIZKSOB.esm.js.map