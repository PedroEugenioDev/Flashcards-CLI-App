declare const repeat: (num: number | undefined, value: any, toString?: boolean) => any[] | string;

declare function asyncForEach<T>(array: Array<T>, callback: (item: T, index: number, og: T[]) => void): Promise<void>;
declare const hello: (args?: unknown) => Promise<unknown>;
declare const promisify: (func: any) => Promise<void>;
declare const asyncFilter: (arr: any[], predicate: any) => Promise<any[]>;
declare const asyncSome: (arr: any[], predicate: any) => Promise<boolean>;
declare const asyncEvery: (arr: any[], predicate: any) => Promise<boolean>;

declare const toRoundNumber: (num: number, decimalPlaces?: number) => string;

declare const removeTag: (input: string, tag: string) => string;
declare const getStringFromTag: (input: string, tag: string) => string;
declare const getIndexes: (source: string, find: string) => number[];
declare const nthIndex: (source: string, find: string, nth: number) => number;

declare class Style {
    block: string;
    constructor(block: string);
    bem(element?: string, modifier?: string): string;
}

export { Style as S, asyncForEach as a, asyncFilter as b, asyncSome as c, asyncEvery as d, removeTag as e, getIndexes as f, getStringFromTag as g, hello as h, nthIndex as n, promisify as p, repeat as r, toRoundNumber as t };
