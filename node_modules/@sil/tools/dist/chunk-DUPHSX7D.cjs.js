"use strict";Object.defineProperty(exports, "__esModule", {value: true});



var _chunk2BYJ44PFcjsjs = require('./chunk-2BYJ44PF.cjs.js');


var _chunk4DCDF6FZcjsjs = require('./chunk-4DCDF6FZ.cjs.js');

// src/lib/system/file.ts
var _fs = require('fs');
var _path = require('path');
var { mkdir, readFile, access, writeFile, R_OK, F_OK, W_OK } = _chunk4DCDF6FZcjsjs.__require.call(void 0, "fs").promises;
var createDir = async (dir) => {
  try {
    !_fs.existsSync.call(void 0, dir) && await mkdir(dir, { recursive: true });
  } catch (error) {
    console.error(error);
  }
};
var getFileData = async (filePath) => {
  try {
    const file = await readFile(filePath).then((res) => res.toString());
    return filePath.includes(".json") ? JSON.parse(file) : file;
  } catch (err) {
    throw Error(err);
  }
};
var getJsonData = async (filePath) => {
  const data = await getFileData(filePath);
  return JSON.parse(data);
};
var fileExists = async (path) => {
  try {
    await access(path, R_OK | W_OK | F_OK);
    return true;
  } catch (e) {
    return false;
  }
};
var filesExist = async (paths, some = false) => {
  const action = some ? _chunk2BYJ44PFcjsjs.asyncSome : _chunk2BYJ44PFcjsjs.asyncEvery;
  try {
    const result = await action(
      paths,
      async (file) => await fileExists(file)
    );
    return result;
  } catch (err) {
    return false;
  }
};
var existingFiles = async (paths) => {
  const existingPaths = [];
  await _chunk2BYJ44PFcjsjs.asyncForEach.call(void 0, paths, async (path) => {
    const exists = await fileExists(path);
    if (exists)
      existingPaths.push(path);
  });
  return existingPaths;
};
var createFile = async (dest, data) => {
  await mkdir(_path.dirname.call(void 0, dest), { recursive: true });
  await writeFile(dest, data);
};

// src/lib/system/path.ts
var parentPath = (path, goBack = -1) => path.split("/").slice(0, goBack).join("/");
var renamePath = (ogLink, rename) => {
  const pathGroup = ogLink.split("/");
  pathGroup[pathGroup.length - 2] = rename;
  return pathGroup.join("/").toLowerCase();
};

// src/lib/system/fs.ts
var { mkdir: mkdir2, readFile: readFile2, access: access2, writeFile: writeFile2, createWriteStream, existsSync: existsSync2 } = _chunk4DCDF6FZcjsjs.__require.call(void 0, "fs").promises;

















exports.createDir = createDir; exports.getFileData = getFileData; exports.getJsonData = getJsonData; exports.fileExists = fileExists; exports.filesExist = filesExist; exports.existingFiles = existingFiles; exports.createFile = createFile; exports.parentPath = parentPath; exports.renamePath = renamePath; exports.mkdir = mkdir2; exports.readFile = readFile2; exports.access = access2; exports.writeFile = writeFile2; exports.createWriteStream = createWriteStream; exports.existsSync = existsSync2;
//# sourceMappingURL=chunk-DUPHSX7D.cjs.js.map