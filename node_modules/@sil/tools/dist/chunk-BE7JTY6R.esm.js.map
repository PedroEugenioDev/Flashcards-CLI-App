{"version":3,"sources":["../src/lib/system/file.ts","../src/lib/system/path.ts","../src/lib/system/fs.ts"],"sourcesContent":["import { existsSync } from \"fs\";\nimport { dirname } from \"path\";\nimport { asyncEvery, asyncForEach, asyncSome } from \"../default/async\";\nconst { mkdir, readFile, access, writeFile, R_OK, F_OK, W_OK } =\n  require(\"fs\").promises;\n\nexport const createDir = async (dir: string): Promise<void> => {\n  try {\n    !existsSync(dir) && (await mkdir(dir, { recursive: true }));\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const getFileData = async (filePath: string): Promise<string> => {\n  try {\n    const file = await readFile(filePath).then((res: any) => res.toString());\n    return filePath.includes(\".json\") ? JSON.parse(file) : file;\n  } catch (err: any) {\n    throw Error(err);\n  }\n};\n\nexport const getJsonData = async (filePath: string): Promise<{}> => {\n  const data = await getFileData(filePath);\n  return JSON.parse(data);\n};\n\nexport const fileExists = async (path: string): Promise<boolean> => {\n  try {\n    await access(path, R_OK | W_OK | F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const filesExist = async (\n  paths: string[],\n  some = false\n): Promise<boolean> => {\n  const action = some ? asyncSome : asyncEvery;\n\n  try {\n    const result = await action(\n      paths,\n      async (file: string) => await fileExists(file)\n    );\n    return result;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const existingFiles = async (paths: string[]): Promise<string[]> => {\n  const existingPaths: string[] = [];\n  await asyncForEach(paths, async (path) => {\n    const exists = await fileExists(path);\n    if (exists) existingPaths.push(path);\n  });\n  return existingPaths;\n};\n\nexport const createFile = async (dest: string, data: string): Promise<void> => {\n  await mkdir(dirname(dest), { recursive: true });\n  await writeFile(dest, data);\n};\n","export const parentPath = (path: string, goBack = -1): string =>\n  path.split(\"/\").slice(0, goBack).join(\"/\");\n\nexport const renamePath = (ogLink: string, rename: string) => {\n  const pathGroup = ogLink.split(\"/\");\n  pathGroup[pathGroup.length - 2] = rename;\n  return pathGroup.join(\"/\").toLowerCase();\n};\n","const { mkdir, readFile, access, writeFile, createWriteStream, existsSync } =\n  require(\"fs\").promises;\n\nexport { mkdir, readFile, access, writeFile, createWriteStream, existsSync };\n"],"mappings":";;;;;;;;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AAExB,IAAM,EAAE,OAAO,UAAU,QAAQ,WAAW,MAAM,MAAM,KAAK,IAC3D,UAAQ,IAAI,EAAE;AAET,IAAM,YAAY,OAAO,QAA+B;AAC7D,MAAI;AACF,KAAC,WAAW,GAAG,KAAM,MAAM,MAAM,KAAK,EAAE,WAAW,KAAK,CAAC;AAAA,EAC3D,SAAS,OAAP;AACA,YAAQ,MAAM,KAAK;AAAA,EACrB;AACF;AAEO,IAAM,cAAc,OAAO,aAAsC;AACtE,MAAI;AACF,UAAM,OAAO,MAAM,SAAS,QAAQ,EAAE,KAAK,CAAC,QAAa,IAAI,SAAS,CAAC;AACvE,WAAO,SAAS,SAAS,OAAO,IAAI,KAAK,MAAM,IAAI,IAAI;AAAA,EACzD,SAAS,KAAP;AACA,UAAM,MAAM,GAAG;AAAA,EACjB;AACF;AAEO,IAAM,cAAc,OAAO,aAAkC;AAClE,QAAM,OAAO,MAAM,YAAY,QAAQ;AACvC,SAAO,KAAK,MAAM,IAAI;AACxB;AAEO,IAAM,aAAa,OAAO,SAAmC;AAClE,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,IAAI;AACrC,WAAO;AAAA,EACT,QAAE;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,aAAa,OACxB,OACA,OAAO,UACc;AACrB,QAAM,SAAS,OAAO,YAAY;AAElC,MAAI;AACF,UAAM,SAAS,MAAM;AAAA,MACnB;AAAA,MACA,OAAO,SAAiB,MAAM,WAAW,IAAI;AAAA,IAC/C;AACA,WAAO;AAAA,EACT,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAEO,IAAM,gBAAgB,OAAO,UAAuC;AACzE,QAAM,gBAA0B,CAAC;AACjC,QAAM,aAAa,OAAO,OAAO,SAAS;AACxC,UAAM,SAAS,MAAM,WAAW,IAAI;AACpC,QAAI;AAAQ,oBAAc,KAAK,IAAI;AAAA,EACrC,CAAC;AACD,SAAO;AACT;AAEO,IAAM,aAAa,OAAO,MAAc,SAAgC;AAC7E,QAAM,MAAM,QAAQ,IAAI,GAAG,EAAE,WAAW,KAAK,CAAC;AAC9C,QAAM,UAAU,MAAM,IAAI;AAC5B;;;AClEO,IAAM,aAAa,CAAC,MAAc,SAAS,OAChD,KAAK,MAAM,GAAG,EAAE,MAAM,GAAG,MAAM,EAAE,KAAK,GAAG;AAEpC,IAAM,aAAa,CAAC,QAAgB,WAAmB;AAC5D,QAAM,YAAY,OAAO,MAAM,GAAG;AAClC,YAAU,UAAU,SAAS,CAAC,IAAI;AAClC,SAAO,UAAU,KAAK,GAAG,EAAE,YAAY;AACzC;;;ACPA,IAAM,EAAE,OAAAA,QAAO,UAAAC,WAAU,QAAAC,SAAQ,WAAAC,YAAW,mBAAmB,YAAAC,YAAW,IACxE,UAAQ,IAAI,EAAE;","names":["mkdir","readFile","access","writeFile","existsSync"]}