import {
  asyncEvery,
  asyncForEach,
  asyncSome
} from "./chunk-FLIZKSOB.esm.js";
import {
  __require
} from "./chunk-6FCK5PTT.esm.js";

// src/lib/system/file.ts
import { existsSync } from "fs";
import { dirname } from "path";
var { mkdir, readFile, access, writeFile, R_OK, F_OK, W_OK } = __require("fs").promises;
var createDir = async (dir) => {
  try {
    !existsSync(dir) && await mkdir(dir, { recursive: true });
  } catch (error) {
    console.error(error);
  }
};
var getFileData = async (filePath) => {
  try {
    const file = await readFile(filePath).then((res) => res.toString());
    return filePath.includes(".json") ? JSON.parse(file) : file;
  } catch (err) {
    throw Error(err);
  }
};
var getJsonData = async (filePath) => {
  const data = await getFileData(filePath);
  return JSON.parse(data);
};
var fileExists = async (path) => {
  try {
    await access(path, R_OK | W_OK | F_OK);
    return true;
  } catch {
    return false;
  }
};
var filesExist = async (paths, some = false) => {
  const action = some ? asyncSome : asyncEvery;
  try {
    const result = await action(
      paths,
      async (file) => await fileExists(file)
    );
    return result;
  } catch (err) {
    return false;
  }
};
var existingFiles = async (paths) => {
  const existingPaths = [];
  await asyncForEach(paths, async (path) => {
    const exists = await fileExists(path);
    if (exists)
      existingPaths.push(path);
  });
  return existingPaths;
};
var createFile = async (dest, data) => {
  await mkdir(dirname(dest), { recursive: true });
  await writeFile(dest, data);
};

// src/lib/system/path.ts
var parentPath = (path, goBack = -1) => path.split("/").slice(0, goBack).join("/");
var renamePath = (ogLink, rename) => {
  const pathGroup = ogLink.split("/");
  pathGroup[pathGroup.length - 2] = rename;
  return pathGroup.join("/").toLowerCase();
};

// src/lib/system/fs.ts
var { mkdir: mkdir2, readFile: readFile2, access: access2, writeFile: writeFile2, createWriteStream, existsSync: existsSync2 } = __require("fs").promises;

export {
  createDir,
  getFileData,
  getJsonData,
  fileExists,
  filesExist,
  existingFiles,
  createFile,
  parentPath,
  renamePath,
  mkdir2 as mkdir,
  readFile2 as readFile,
  access2 as access,
  writeFile2 as writeFile,
  createWriteStream,
  existsSync2 as existsSync
};
//# sourceMappingURL=chunk-BE7JTY6R.esm.js.map