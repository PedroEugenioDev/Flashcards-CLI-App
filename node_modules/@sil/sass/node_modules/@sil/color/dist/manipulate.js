"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mix = exports.darken = exports.lighten = exports.setOpacity = exports.setLightness = exports.getType = void 0;
const is_1 = require("./is");
const to_1 = require("./to");
const types_1 = require("./types");
const getType = (value) => {
    if ((0, is_1.isRGB)(value))
        return types_1.ColorType.RGB;
    if ((0, is_1.isHex)(value))
        return types_1.ColorType.HEX;
    if ((0, is_1.isHSL)(value))
        return types_1.ColorType.HSL;
    if ((0, is_1.isRGBA)(value))
        return types_1.ColorType.RGBA;
    if ((0, is_1.isHSLA)(value))
        return types_1.ColorType.HSLA;
    return types_1.ColorType.UNKNOWN;
};
exports.getType = getType;
const setLightness = (value, lightness) => {
    const { h, s } = (0, to_1.toHSL)(value);
    const type = (0, exports.getType)(value);
    const hsl = {
        h: h,
        s: s,
        l: lightness,
    };
    return (0, to_1.toType)(hsl, type);
};
exports.setLightness = setLightness;
const setOpacity = (value, alpha) => {
    let type = (0, exports.getType)(value);
    let color = Object.assign(Object.assign({}, (0, to_1.toRGB)(value)), { a: alpha });
    switch (type) {
        case types_1.ColorType.CMYK:
        case types_1.ColorType.HEX:
        case types_1.ColorType.RGB:
            type = types_1.ColorType.RGBA;
            break;
        case types_1.ColorType.HSL:
            color = Object.assign(Object.assign({}, value), { a: alpha });
            type = types_1.ColorType.HSLA;
            break;
        case types_1.ColorType.HSV:
            color = Object.assign(Object.assign({}, value), { a: alpha });
            type = types_1.ColorType.HSVA;
            break;
    }
    return (0, to_1.toType)(color, type);
};
exports.setOpacity = setOpacity;
const lighten = (value, amount) => {
    const { l } = (0, to_1.toHSL)(value);
    const type = (0, exports.getType)(value);
    const color = (0, exports.setLightness)(value, (l * amount));
    return (0, to_1.toType)(color, type);
};
exports.lighten = lighten;
const darken = (value, amount) => {
    const { l } = (0, to_1.toHSL)(value);
    const type = (0, exports.getType)(value);
    const color = (0, exports.setLightness)(value, (l / amount));
    return (0, to_1.toType)(color, type);
};
exports.darken = darken;
const mix = (from, to, amount) => {
    const type = (0, exports.getType)(from);
    const fromRgb = (0, to_1.toRGB)(from);
    const endRgb = (0, to_1.toRGB)(to);
    const delta = {
        r: ((endRgb.r - fromRgb.r) / 100) * amount,
        g: ((endRgb.g - fromRgb.g) / 100) * amount,
        b: ((endRgb.b - fromRgb.b) / 100) * amount,
    };
    const result = {
        r: Math.round(fromRgb.r + delta.r),
        g: Math.round(fromRgb.g + delta.g),
        b: Math.round(fromRgb.b + delta.b),
    };
    return (0, to_1.toType)(result, type);
};
exports.mix = mix;
//# sourceMappingURL=manipulate.js.map