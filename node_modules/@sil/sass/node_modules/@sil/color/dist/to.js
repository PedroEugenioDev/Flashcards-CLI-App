"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toType = exports.toCMYK = exports.toRGB = exports.toHSV = exports.toHSL = exports.toHex = void 0;
const types_1 = require("./types");
const is_1 = require("./is");
const types_2 = require("./types");
const convert_1 = require("./convert");
const object_1 = require("./object");
const convert_2 = require("./convert");
const toHex = (color) => {
    if (typeof color == "string") {
        if ((0, is_1.isHex)(color))
            return color;
        if ((0, is_1.isRGB)(color))
            return (0, convert_1.rgbToHex)((0, object_1.toRgbObject)(color));
        if ((0, is_1.isHSL)(color))
            return (0, convert_1.hslToHex)((0, object_1.toHslObject)(color));
        if ((0, is_1.isHSV)(color))
            return (0, convert_1.hsvToHex)((0, object_1.toHsvObject)(color));
        if ((0, is_1.isCMYK)(color))
            return (0, convert_1.cmykToHex)((0, object_1.toCmykObject)(color));
    }
    else if ((0, types_2.instanceOfRGB)(color) || (0, types_2.instanceOfRGBA)(color)) {
        return (0, convert_1.rgbToHex)(color);
    }
    else if ((0, types_2.instanceOfHSL)(color) || (0, types_2.instanceOfHSLA)(color)) {
        return (0, convert_1.hslToHex)(color);
    }
    else if ((0, types_2.instanceOfHSV)(color) || (0, types_2.instanceOfHSVA)(color)) {
        return (0, convert_1.hsvToHex)(color);
    }
    else if ((0, types_2.instanceOfCMYK)(color)) {
        return (0, convert_1.cmykToHex)(color);
    }
    return convert_2.defaultValues.hex;
};
exports.toHex = toHex;
const toHSL = (color) => {
    if (typeof color == "string") {
        if ((0, is_1.isHex)(color))
            return (0, convert_1.hexToHsl)(color);
        if ((0, is_1.isRGB)(color))
            return (0, convert_1.rgbToHsl)((0, object_1.toRgbObject)(color));
        if ((0, is_1.isHSL)(color))
            return (0, object_1.toHslObject)(color);
        if ((0, is_1.isHSV)(color))
            return (0, convert_1.hsvToHsl)((0, object_1.toHsvObject)(color));
        if ((0, is_1.isCMYK)(color))
            return (0, convert_1.cmykToHsl)((0, object_1.toCmykObject)(color));
    }
    else if ((0, types_2.instanceOfRGB)(color) || (0, types_2.instanceOfRGBA)(color)) {
        return (0, convert_1.rgbToHsl)(color);
    }
    else if ((0, types_2.instanceOfHSL)(color) || (0, types_2.instanceOfHSLA)(color)) {
        return color;
    }
    else if ((0, types_2.instanceOfHSV)(color) || (0, types_2.instanceOfHSVA)(color)) {
        return (0, convert_1.hsvToHsl)(color);
    }
    else if ((0, types_2.instanceOfCMYK)(color)) {
        return (0, convert_1.cmykToHsl)(color);
    }
    return convert_2.defaultValues.hsl;
};
exports.toHSL = toHSL;
const toHSV = (color) => {
    if (typeof color == "string") {
        if ((0, is_1.isHex)(color))
            return (0, convert_1.hexToHsv)(color);
        if ((0, is_1.isRGB)(color))
            return (0, convert_1.rgbToHsv)((0, object_1.toRgbObject)(color));
        if ((0, is_1.isHSL)(color))
            return (0, convert_1.hslToHsv)((0, object_1.toHslObject)(color));
        if ((0, is_1.isHSV)(color))
            return (0, object_1.toHsvObject)(color);
        if ((0, is_1.isCMYK)(color))
            return (0, convert_1.cmykToHsv)((0, object_1.toCmykObject)(color));
    }
    else if ((0, types_2.instanceOfRGB)(color) || (0, types_2.instanceOfRGBA)(color)) {
        return (0, convert_1.rgbToHsv)(color);
    }
    else if ((0, types_2.instanceOfHSL)(color) || (0, types_2.instanceOfHSLA)(color)) {
        return (0, convert_1.hslToHsv)(color);
    }
    else if ((0, types_2.instanceOfCMYK)(color)) {
        return (0, convert_1.cmykToHsv)(color);
    }
    return convert_2.defaultValues.hsv;
};
exports.toHSV = toHSV;
const toRGB = (color) => {
    if (typeof color == "string") {
        if ((0, is_1.isHex)(color))
            return (0, convert_1.hexToRgb)(color);
        if ((0, is_1.isRGB)(color))
            return (0, object_1.toRgbObject)(color);
        if ((0, is_1.isHSL)(color))
            return (0, convert_1.hslToRgb)((0, object_1.toHslObject)(color));
        if ((0, is_1.isCMYK)(color))
            return (0, convert_1.cmykToRgb)((0, object_1.toCmykObject)(color));
    }
    else if ((0, types_2.instanceOfRGB)(color) || (0, types_2.instanceOfRGBA)(color)) {
        return color;
    }
    else if ((0, types_2.instanceOfHSL)(color) || (0, types_2.instanceOfHSLA)(color)) {
        return (0, convert_1.hslToRgb)(color);
    }
    else if ((0, types_2.instanceOfHSV)(color) || (0, types_2.instanceOfHSVA)(color)) {
        return (0, convert_1.hsvToRgb)(color);
    }
    else if ((0, types_2.instanceOfCMYK)(color)) {
        return (0, convert_1.cmykToRgb)(color);
    }
    return convert_2.defaultValues.rgb;
};
exports.toRGB = toRGB;
const toCMYK = (color) => {
    if (typeof color == "string") {
        if ((0, is_1.isHex)(color))
            return (0, convert_1.hexToCmyk)(color);
        if ((0, is_1.isRGB)(color))
            return (0, convert_1.rgbToCmyk)((0, object_1.toRgbObject)(color));
        if ((0, is_1.isHSL)(color))
            return (0, convert_1.hslToCmyk)((0, object_1.toHslObject)(color));
        if ((0, is_1.isHSV)(color))
            return (0, convert_1.hsvToCmyk)((0, object_1.toHsvObject)(color));
        if ((0, is_1.isCMYK)(color))
            return (0, object_1.toCmykObject)(color);
    }
    else if ((0, types_2.instanceOfRGB)(color) || (0, types_2.instanceOfRGBA)(color)) {
        return (0, convert_1.rgbToCmyk)(color);
    }
    else if ((0, types_2.instanceOfHSL)(color) || (0, types_2.instanceOfHSLA)(color)) {
        return (0, convert_1.hslToCmyk)(color);
    }
    else if ((0, types_2.instanceOfHSV)(color) || (0, types_2.instanceOfHSVA)(color)) {
        return (0, convert_1.hsvToCmyk)(color);
    }
    else if ((0, types_2.instanceOfCMYK)(color)) {
        return color;
    }
    return convert_2.defaultValues.cmyk;
};
exports.toCMYK = toCMYK;
const toType = (color, type) => {
    switch (type) {
        case types_1.ColorType.HEX:
            return (0, exports.toHex)(color);
        case types_1.ColorType.RGB:
        case types_1.ColorType.RGBA:
            return (0, exports.toRGB)(color);
        case types_1.ColorType.HSL:
        case types_1.ColorType.HSLA:
            return (0, exports.toHSL)(color);
        case types_1.ColorType.HSV:
        case types_1.ColorType.HSVA:
            return (0, exports.toHSV)(color);
        case types_1.ColorType.CMYK:
            return (0, exports.toCMYK)(color);
        default:
            return (0, exports.toHex)(color);
    }
};
exports.toType = toType;
//# sourceMappingURL=to.js.map