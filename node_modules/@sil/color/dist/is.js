"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCOLOR = exports.isCMYK = exports.isHSVA = exports.isHSV = exports.isHSLA = exports.isHSL = exports.isRGBA = exports.isRGB = exports.isHex = void 0;
const helpers_1 = require("./helpers");
const types_1 = require("./types");
const isHex = (value) => {
    if (typeof value !== "string")
        return false;
    const reg = /^#([0-9a-f]{3}){1,2}$/i;
    return reg.test(value);
};
exports.isHex = isHex;
const isRGB = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfRGB)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const rgbNumbers = [];
    value
        .replace(/[^\d,]/g, "")
        .split(",")
        .forEach((v) => rgbNumbers.push(parseInt(v)));
    return (value.startsWith("rgb(") &&
        value.endsWith(")") &&
        rgbNumbers.length == 3 &&
        !rgbNumbers.some((n) => n > 255 || n < 0) &&
        !rgbNumbers.some((n) => Math.round(n) !== n));
};
exports.isRGB = isRGB;
const isRGBA = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfRGBA)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const rgbNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("rgba(") &&
        value.endsWith(")") &&
        rgbNumbers.length == 4 &&
        !rgbNumbers.some((n) => n > 255 || n < 0) &&
        !rgbNumbers.some((n) => Math.round(n) !== n));
};
exports.isRGBA = isRGBA;
const isHSL = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfHSL)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const hslNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("hsl(") &&
        value.endsWith(")") &&
        (hslNumbers.length == 3 || hslNumbers.length == 4) &&
        (0, helpers_1.isBetween)(hslNumbers[0], 0, 360) &&
        (0, helpers_1.areBetween)([hslNumbers[1], hslNumbers[2]], 0, 100) &&
        (hslNumbers[3] ? (0, helpers_1.isBetween)(hslNumbers[3], 0, 1) : true) &&
        ![hslNumbers[0], hslNumbers[1], hslNumbers[2]].some((n) => Math.round(n) !== n));
};
exports.isHSL = isHSL;
const isHSLA = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfHSLA)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const hslNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("hsla(") &&
        value.endsWith(")") &&
        hslNumbers.length == 4 &&
        (0, helpers_1.isBetween)(hslNumbers[0], 0, 360) &&
        (0, helpers_1.areBetween)([hslNumbers[1], hslNumbers[2]], 0, 100) &&
        (0, helpers_1.isBetween)(hslNumbers[3], 0, 1) &&
        ![hslNumbers[0], hslNumbers[1], hslNumbers[2]].some((n) => Math.round(n) !== n));
};
exports.isHSLA = isHSLA;
const isHSV = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfHSL)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const hslNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("hsv(") &&
        value.endsWith(")") &&
        hslNumbers.length == 3 &&
        (0, helpers_1.isBetween)(hslNumbers[0], 0, 360) &&
        (0, helpers_1.areBetween)((0, helpers_1.shift)(hslNumbers), 0, 100) &&
        !hslNumbers.some((n) => Math.round(n) !== n));
};
exports.isHSV = isHSV;
const isHSVA = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfHSLA)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const hslNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("hsva(") &&
        value.endsWith(")") &&
        hslNumbers.length == 4 &&
        (0, helpers_1.isBetween)(hslNumbers[0], 0, 360) &&
        (0, helpers_1.areBetween)((0, helpers_1.shift)(hslNumbers), 0, 100) &&
        !hslNumbers.some((n) => Math.round(n) !== n));
};
exports.isHSVA = isHSVA;
const isCMYK = (value) => {
    if (typeof value !== "string" && (0, types_1.instanceOfCMYK)(value))
        return true;
    if (typeof value !== "string")
        return false;
    const cmykNumbers = (0, helpers_1.getNumbers)(value);
    return (value.startsWith("cmyk(") &&
        value.endsWith(")") &&
        cmykNumbers.length == 4 &&
        !cmykNumbers.some((n) => n > 100 || n < 0) &&
        !cmykNumbers.some((n) => Math.round(n) !== n));
};
exports.isCMYK = isCMYK;
const isCOLOR = (value) => {
    return ((0, exports.isHex)(value) ||
        (0, exports.isHSL)(value) ||
        (0, exports.isHSLA)(value) ||
        (0, exports.isRGB)(value) ||
        (0, exports.isRGBA)(value) ||
        (0, exports.isHSV)(value) ||
        (0, exports.isHSVA)(value));
};
exports.isCOLOR = isCOLOR;
//# sourceMappingURL=is.js.map