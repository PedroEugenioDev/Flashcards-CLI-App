"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const complimentary_1 = require("./complimentary");
const to_1 = require("./to");
const types_1 = require("./types");
describe('getComplimentary', () => {
    it('should return shades when type is shade', () => {
        const options = { total: 3, type: complimentary_1.ComplimentaryType.SHADE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(3);
        result.forEach(color => {
            expect(color).toHaveProperty('r');
            expect(color).toHaveProperty('g');
            expect(color).toHaveProperty('b');
        });
    });
    it('should return tints when type is tint', () => {
        const options = { total: 3, type: complimentary_1.ComplimentaryType.TINT };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(3);
        result.forEach(color => {
            expect(color).toHaveProperty('r');
            expect(color).toHaveProperty('g');
            expect(color).toHaveProperty('b');
        });
    });
    it('should return tones when type is tone', () => {
        const options = { total: 3, type: complimentary_1.ComplimentaryType.TONE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(3);
        result.forEach(color => {
            expect(color).toHaveProperty('r');
            expect(color).toHaveProperty('g');
            expect(color).toHaveProperty('b');
        });
    });
    it('should return hues when type is hue', () => {
        const options = { total: 3, type: complimentary_1.ComplimentaryType.HUE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(3);
        result.forEach(color => {
            expect(color).toHaveProperty('r');
            expect(color).toHaveProperty('g');
            expect(color).toHaveProperty('b');
        });
    });
    it('should return correct number of shades when type is shade', () => {
        const options = { total: 5, type: complimentary_1.ComplimentaryType.SHADE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(5);
    });
    it('should return correct number of tints when type is tint', () => {
        const options = { total: 4, type: complimentary_1.ComplimentaryType.TINT };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(4);
    });
    it('should return correct number of tones when type is tone', () => {
        const options = { total: 3, type: complimentary_1.ComplimentaryType.TONE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(3);
    });
    it('should return correct number of hues when type is hue', () => {
        const options = { total: 6, type: complimentary_1.ComplimentaryType.HUE };
        const result = (0, complimentary_1.getComplimentary)('#ff0000', options);
        expect(result.length).toBe(6);
    });
    it('should return complimentary colors when type is hue', () => {
        const options = { total: 2, type: complimentary_1.ComplimentaryType.HUE };
        const color = '#ff0000';
        const result = (0, complimentary_1.getComplimentary)(color, options);
        const originalHue = (0, to_1.toHSL)(color).h;
        const complimentaryHue = (0, to_1.toHSL)(result[1]).h;
        const hueDifference = Math.abs(originalHue - complimentaryHue);
        expect(hueDifference).toBeCloseTo(180, -1);
    });
    it('should return colors in RGB format when output is RGB', () => {
        const options = { total: 2, type: complimentary_1.ComplimentaryType.HUE, output: types_1.ColorType.RGB };
        const color = '#ff0000';
        const result = (0, complimentary_1.getComplimentary)(color, options);
        const rgbColor = (0, to_1.toRGB)(result[1]);
        expect(result[1]).toEqual(rgbColor);
    });
    it('should return colors in HSL format when output is HSL', () => {
        const options = { total: 2, type: complimentary_1.ComplimentaryType.HUE, output: types_1.ColorType.HSL };
        const color = '#ff0000';
        const result = (0, complimentary_1.getComplimentary)(color, options);
        const hslColor = (0, to_1.toHSL)(result[1]);
        expect(result[1]).toEqual(hslColor);
    });
    it('should return colors in HEX format when output is HEX', () => {
        const options = { total: 2, type: complimentary_1.ComplimentaryType.HUE, output: types_1.ColorType.HEX };
        const color = '#ff0000';
        const result = (0, complimentary_1.getComplimentary)(color, options);
        const hexColor = (0, to_1.toHex)(result[1]);
        expect(result[1]).toEqual(hexColor);
    });
});
//# sourceMappingURL=complimentary.test.js.map