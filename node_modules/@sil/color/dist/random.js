"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomBright = exports.getRandomPastel = exports.getRandomColor = void 0;
const to_1 = require("./to");
const string_1 = require("./string");
const types_1 = require("./types");
const helpers_1 = require("./helpers");
const defaultRandomOptions = {
    limit: [0, 255],
    type: types_1.ColorType.HEX,
    returnType: 'string'
};
const returnArray = (v) => {
    if (typeof v === 'number')
        return [v, v];
    return v;
};
const getLimitRGB = (options, key) => {
    if (options.limit instanceof Array) {
        return options.limit;
    }
    else if (typeof options.limit === 'object') {
        if ('r' in options.limit && key === 'r') {
            return returnArray(options.limit.r);
        }
        else if ('g' in options.limit && key === 'g') {
            return returnArray(options.limit.g);
        }
        else if ('b' in options.limit && key === 'b') {
            return returnArray(options.limit.b);
        }
        else if ('min' in options.limit && 'max' in options.limit) {
            return [options.limit.min, options.limit.max];
        }
        else {
            return [0, 255];
        }
    }
    return [0, 255];
};
const getLimitHSL = (options, key) => {
    if (options.limit instanceof Array) {
        return options.limit;
    }
    else if (typeof options.limit === 'object') {
        if ('h' in options.limit && key === 'h') {
            return returnArray(options.limit.h);
        }
        else if ('s' in options.limit && key === 's') {
            return returnArray(options.limit.s);
        }
        else if ('l' in options.limit && key === 'l') {
            return returnArray(options.limit.l);
        }
        else if ('min' in options.limit && 'max' in options.limit) {
            return [options.limit.min, options.limit.max];
        }
        else {
            return [0, 100];
        }
    }
    return [0, 100];
};
const getMixColorType = (options) => {
    if ('h' in options.limit && 's' in options.limit && 'l' in options.limit) {
        return types_1.ColorType.HSL;
    }
    return types_1.ColorType.RGB;
};
const getRandomRGB = (options) => {
    const rgb = { r: 0, g: 0, b: 0 };
    const limitR = getLimitRGB(options, 'r');
    const limitG = getLimitRGB(options, 'g');
    const limitB = getLimitRGB(options, 'b');
    rgb.r = (0, helpers_1.randomBetween)(limitR[0], limitR[1]);
    rgb.g = (0, helpers_1.randomBetween)(limitG[0], limitG[1]);
    rgb.b = (0, helpers_1.randomBetween)(limitB[0], limitB[1]);
    return rgb;
};
const getRandomHSL = (options) => {
    const hsl = { h: 0, s: 0, l: 0 };
    const limitH = getLimitHSL(options, 'h');
    const limitS = getLimitHSL(options, 's');
    const limitL = getLimitHSL(options, 'l');
    hsl.h = (0, helpers_1.randomBetween)(limitH[0], limitH[1]);
    hsl.s = (0, helpers_1.randomBetween)(limitS[0], limitS[1]);
    hsl.l = (0, helpers_1.randomBetween)(limitL[0], limitL[1]);
    return hsl;
};
function getRandomColor(options = {}) {
    const opts = Object.assign(Object.assign({}, defaultRandomOptions), options);
    if (getMixColorType(opts) === types_1.ColorType.HSL) {
        const hsl = getRandomHSL(opts);
        const output = (0, to_1.toType)(hsl, opts.type);
        if (opts.returnType === 'color')
            return output;
        return (0, string_1.toString)(output);
    }
    const rgb = getRandomRGB(opts);
    const output = (0, to_1.toType)(rgb, opts.type);
    if (opts.returnType === 'color')
        return output;
    return (0, string_1.toString)(output);
}
exports.getRandomColor = getRandomColor;
const getRandomPastel = (options = {}) => {
    return getRandomColor(Object.assign(Object.assign({}, options), { limit: {
            s: [80, 100],
            l: [85, 95]
        } }));
};
exports.getRandomPastel = getRandomPastel;
const getRandomBright = (options = {}) => {
    return getRandomColor(Object.assign(Object.assign({}, options), { limit: {
            s: [80, 95],
            l: [40, 60],
        } }));
};
exports.getRandomBright = getRandomBright;
//# sourceMappingURL=random.js.map