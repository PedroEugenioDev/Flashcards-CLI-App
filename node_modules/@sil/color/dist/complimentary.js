"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComplimentary = exports.ComplimentaryType = void 0;
const to_1 = require("./to");
const types_1 = require("./types");
exports.ComplimentaryType = {
    SHADE: 'shade',
    TINT: 'tint',
    TONE: 'tone',
    HUE: 'hue'
};
const ComplimentaryDefaultOptions = {
    total: 3,
    type: 'tint',
    output: types_1.ColorType.RGB
};
const getShades = (color, total) => {
    const hsl = (0, to_1.toHSL)(color);
    const lightnessStep = (hsl.l - 10) / total;
    const shades = [];
    for (let i = 0; i < total; i++) {
        const newLightness = hsl.l - i * lightnessStep;
        const newColor = {
            h: hsl.h,
            s: hsl.s,
            l: newLightness,
        };
        shades.push(newColor);
    }
    return shades.map((color) => (0, to_1.toRGB)(color));
};
const getTints = (color, total) => {
    const hsl = (0, to_1.toHSL)(color);
    const lightnessStep = (100 - hsl.l) / total;
    const tints = [];
    for (let i = 0; i < total; i++) {
        const newLightness = hsl.l + i * lightnessStep;
        const newColor = {
            h: hsl.h,
            s: hsl.s,
            l: newLightness
        };
        tints.push(newColor);
    }
    return tints.map((color) => (0, to_1.toRGB)(color));
};
const getTones = (color, total) => {
    const hsl = (0, to_1.toHSL)(color);
    const lightnessStep = (100 - hsl.l) / total;
    const tones = [];
    for (let i = 0; i < total; i++) {
        const newLightness = hsl.l + i * lightnessStep;
        const newColor = {
            h: hsl.h,
            s: hsl.s,
            l: newLightness,
        };
        tones.push(newColor);
    }
    return tones.map((color) => (0, to_1.toRGB)(color));
};
const getHues = (color, total) => {
    const hsl = (0, to_1.toHSL)(color);
    const hueStep = 360 / total;
    const hues = [];
    for (let i = 0; i < total; i++) {
        const newHue = hsl.h + i * hueStep;
        const newColor = {
            h: newHue,
            s: hsl.s,
            l: hsl.l,
        };
        hues.push(newColor);
    }
    return hues.map((color) => (0, to_1.toRGB)(color));
};
const getComplimentary = (color, options = {}) => {
    const opts = Object.assign(Object.assign({}, ComplimentaryDefaultOptions), options);
    const { total, type } = opts;
    let colors = [];
    switch (type) {
        case exports.ComplimentaryType.SHADE:
            colors = getShades(color, total);
        case exports.ComplimentaryType.TINT:
            colors = getTints(color, total);
        case exports.ComplimentaryType.TONE:
            colors = getTones(color, total);
        default:
        case exports.ComplimentaryType.HUE:
            colors = getHues(color, total);
    }
    return colors.map((color) => (0, to_1.toType)(color, opts.output));
};
exports.getComplimentary = getComplimentary;
//# sourceMappingURL=complimentary.js.map