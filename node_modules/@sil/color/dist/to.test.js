"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const to_1 = require("./to");
const convertToCMYK = [
    {
        input: { h: 0, s: 0, l: 100 },
        output: { c: 0, m: 0, y: 0, k: 0 },
    },
    {
        input: { r: 127, g: 127, b: 127, a: 0.5 },
        output: { c: 0, m: 0, y: 0, k: 50 },
    },
    {
        input: "#ffffff",
        output: { c: 0, m: 0, y: 0, k: 0 },
    },
    {
        input: "#ff0000",
        output: { c: 0, m: 100, y: 100, k: 0 },
    },
];
const convertToRGB = [
    {
        input: { h: 0, s: 0, l: 0 },
        output: { r: 0, g: 0, b: 0 },
    },
    {
        input: { h: 0, s: 0, l: 0, a: 0.5 },
        output: { r: 0, g: 0, b: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { r: 255, g: 255, b: 255 },
    },
];
const convertToRGBA = [
    {
        input: { h: 0, s: 0, l: 0 },
        output: { r: 0, g: 0, b: 0, a: 1 },
    },
    {
        input: { h: 0, s: 0, l: 0, a: 0.5 },
        output: { r: 0, g: 0, b: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { r: 255, g: 255, b: 255, a: 1 },
    },
];
const convertToHSV = [
    {
        input: { h: 50, s: 50, l: 50 },
        output: { h: 50, s: 66, v: 75 },
    },
    {
        input: { h: 0, s: 0, l: 0, a: 0.5 },
        output: { h: 0, s: 0, v: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { h: 0, s: 0, v: 100 },
    },
];
const convertToHSVA = [
    {
        input: { h: 50, s: 50, l: 50 },
        output: { h: 50, s: 66, v: 75, a: 1 },
    },
    {
        input: { h: 0, s: 0, l: 0, a: 0.5 },
        output: { h: 0, s: 0, v: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { h: 0, s: 0, v: 100, a: 1 },
    },
];
const convertToHSL = [
    {
        input: { r: 0, g: 0, b: 0 },
        output: { h: 0, s: 0, l: 0 },
    },
    {
        input: { r: 0, g: 0, b: 0, a: 0.5 },
        output: { h: 0, s: 0, l: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { h: 0, s: 0, l: 100 },
    },
];
const convertToHSLA = [
    {
        input: { r: 0, g: 0, b: 0 },
        output: { h: 0, s: 0, l: 0, a: 1 },
    },
    {
        input: { r: 0, g: 0, b: 0, a: 0.5 },
        output: { h: 0, s: 0, l: 0, a: 0.5 },
    },
    {
        input: "#ffffff",
        output: { h: 0, s: 0, l: 100, a: 1 },
    },
    {
        input: "hsla(0deg, 33%, 25%, 1)",
        output: { h: 0, s: 33, l: 25, a: 1 },
    },
];
const convertToType = [
    {
        input: { r: 0, g: 0, b: 0 },
        type: types_1.ColorType.RGB,
        output: { r: 0, g: 0, b: 0 },
    },
    {
        input: { r: 0, g: 0, b: 0, a: 0 },
        type: types_1.ColorType.HSL,
        output: { h: 0, s: 0, l: 0, a: 0 },
    },
];
describe("to CMYK", () => {
    convertToCMYK.forEach((value) => {
        it(`should convert to CMYK value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toCMYK)(value.input)).toEqual(value.output);
        });
    });
});
describe("to RGB", () => {
    convertToRGB.forEach((value) => {
        it(`should convert to RGB value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toRGB)(value.input)).toEqual(value.output);
        });
    });
});
describe("to RGBA", () => {
    convertToRGBA.forEach((value) => {
        it(`should convert to RGBA value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toRGBA)(value.input)).toEqual(value.output);
        });
    });
});
describe("to HSV", () => {
    convertToHSV.forEach((value) => {
        it(`should convert to HSV value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toHSV)(value.input)).toEqual(value.output);
        });
    });
});
describe("to HSVA", () => {
    convertToHSVA.forEach((value) => {
        it(`should convert to HSVA value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toHSVA)(value.input)).toEqual(value.output);
        });
    });
});
describe("to HSL", () => {
    convertToHSL.forEach((value) => {
        it(`should convert to HSL value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toHSL)(value.input)).toEqual(value.output);
        });
    });
});
describe("to HSLA", () => {
    convertToHSLA.forEach((value) => {
        it(`should convert to HSLA value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toHSLA)(value.input)).toEqual(value.output);
        });
    });
});
describe("to Requested type", () => {
    convertToType.forEach((value) => {
        it(`should convert to Requested value - ${JSON.stringify(value.input)}`, () => {
            expect((0, to_1.toType)(value.input, value.type)).toEqual(value.output);
        });
    });
});
//# sourceMappingURL=to.test.js.map