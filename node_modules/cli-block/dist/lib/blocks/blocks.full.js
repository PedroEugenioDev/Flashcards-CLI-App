"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blockFull = exports.createBlockFull = void 0;
const settings_1 = require("../settings");
const blocks_line_1 = require("./blocks.line");
const blocks_header_1 = require("./blocks.header");
const blocks_footer_1 = require("./blocks.footer");
const util_1 = require("../util");
const config_1 = require("../settings/config");
// Auto Settings display
const createBlockFull = (txt, settings = {}, config = null) => {
    settings = (0, settings_1.useSettings)(settings);
    config = (0, config_1.useConfig)(config);
    const content = (0, blocks_line_1.createBlockLine)(txt);
    let lines = [];
    config.margin && config.marginTop && lines.push("\n");
    lines = [...lines, ...(0, blocks_header_1.createBlockHeader)(config.header)];
    config.margin && lines.push((0, blocks_line_1.createBlockLine)(null, settings)[0]);
    content.forEach((line) => lines.push(line));
    config.margin && lines.push((0, blocks_line_1.createBlockLine)(null, settings)[0]);
    lines = [...lines, ...(0, blocks_footer_1.createBlockFooter)(config.footer)];
    config.margin && config.marginBottom && lines.push("\n");
    return lines;
};
exports.createBlockFull = createBlockFull;
const blockFull = (txt, settings = {}, config = null) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, exports.createBlockFull)(txt, settings, config).forEach((line) => (0, util_1.logger)(line, settings));
});
exports.blockFull = blockFull;
//# sourceMappingURL=blocks.full.js.map