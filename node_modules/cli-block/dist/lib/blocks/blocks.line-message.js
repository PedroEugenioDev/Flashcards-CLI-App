"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blockErrors = exports.createBlockErrors = exports.blockWarnings = exports.createBlockWarnings = exports.blockLineWarning = exports.createBlockLineWarning = exports.blockLineError = exports.createBlockLineError = exports.blockLineSuccess = exports.createBlockLineSuccess = void 0;
const settings_1 = require("../settings");
const util_1 = require("../util");
const _1 = require("./");
/*

  BLOCK LINES SUCCESS / ERROR / WARNING

*/
// lINE With auto checkmark for success
const createBlockLineSuccess = (msg, settings = {}) => (0, _1.createBlockLine)(msg, Object.assign(Object.assign({}, (0, settings_1.useSettings)(settings)), { prefix: (0, util_1.green)("✔") }));
exports.createBlockLineSuccess = createBlockLineSuccess;
const blockLineSuccess = (msg, settings = {}) => {
    (0, exports.createBlockLineSuccess)(msg, settings).forEach((txt) => (0, util_1.logger)(txt, settings));
};
exports.blockLineSuccess = blockLineSuccess;
// LINE with auto X for errors
const createBlockLineError = (msg, settings = {}) => (0, _1.createBlockLine)(msg, Object.assign(Object.assign({}, (0, settings_1.useSettings)(settings)), { prefix: (0, util_1.red)("×") }));
exports.createBlockLineError = createBlockLineError;
const blockLineError = (msg, settings = {}) => (0, exports.createBlockLineError)(msg, settings).forEach((txt) => (0, util_1.logger)(txt, settings));
exports.blockLineError = blockLineError;
// LINE with auto ! for warnings
const createBlockLineWarning = (msg, settings = {}) => (0, _1.createBlockLine)(msg, Object.assign(Object.assign({}, (0, settings_1.useSettings)(settings)), { prefix: (0, util_1.yellow)("!") }));
exports.createBlockLineWarning = createBlockLineWarning;
const blockLineWarning = (msg, settings = {}) => (0, exports.createBlockLineWarning)(msg, settings).forEach((txt) => (0, util_1.logger)(txt, settings));
exports.blockLineWarning = blockLineWarning;
const createBlockWarnings = (warning, settings = {}) => {
    const cfg = (0, settings_1.useSettings)(settings);
    if (!warning || warning.length < 1)
        return [];
    let lines = [];
    lines.push((0, _1.createBlockLine)(null, cfg)[0]);
    lines.push((0, _1.createBlockMid)(`${(0, util_1.yellow)("! Warnings")}`, cfg)[0]);
    warning.forEach((error) => {
        lines.push((0, exports.createBlockLineWarning)(error, cfg)[0]);
    });
    return lines;
};
exports.createBlockWarnings = createBlockWarnings;
const blockWarnings = (msg, settings = {}) => (0, exports.createBlockWarnings)(msg, settings).forEach((txt) => (0, util_1.logger)(txt, settings));
exports.blockWarnings = blockWarnings;
const createBlockErrors = (error, settings = {}) => {
    const cfg = (0, settings_1.useSettings)(settings);
    if (!error || error.length < 1)
        return [];
    let lines = [];
    lines.push((0, _1.createBlockLine)(null, cfg)[0]);
    lines.push((0, _1.createBlockMid)(`${(0, util_1.red)("× Errors")}`, cfg)[0]);
    error.forEach((error) => {
        lines.push((0, exports.createBlockLineError)(error, cfg)[0]);
    });
    lines.push((0, _1.createBlockFooter)(null, cfg)[0]);
    return lines;
};
exports.createBlockErrors = createBlockErrors;
const blockErrors = (msg, settings = {}) => (0, exports.createBlockErrors)(msg, settings).forEach((txt) => (0, util_1.logger)(txt, settings));
exports.blockErrors = blockErrors;
//# sourceMappingURL=blocks.line-message.js.map