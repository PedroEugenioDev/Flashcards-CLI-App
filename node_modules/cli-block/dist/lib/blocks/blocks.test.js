"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const _1 = require("./");
const blocks_model_1 = require("./blocks.model");
const stdOutSpy = jest.spyOn(process.stdout, "write").mockImplementation();
describe("BlockLine", () => {
    beforeEach(() => {
        stdOutSpy.mockClear();
    });
    it("Should Render", () => {
        const expected = `     ${(0, util_1.dim)("┃")}                                                                                ${(0, util_1.dim)("┃")}`;
        expect((0, _1.createBlockLine)()).toEqual([expected]);
    });
    it("Should Log", () => {
        process.stdout.write = jest.fn();
        const expected = `     ${(0, util_1.dim)("┃")}                                                                                ${(0, util_1.dim)("┃")}\n`;
        (0, _1.blockLine)();
        expect(process.stdout.write).toHaveBeenCalledWith(expected);
    });
});
describe("BlockLine - With text", () => {
    beforeEach(() => {
        stdOutSpy.mockClear();
    });
    it("Should Render", () => {
        const expected = `     ${(0, util_1.dim)("┃")}        test                                                                    ${(0, util_1.dim)("┃")}`;
        expect((0, _1.createBlockLine)("test")).toEqual([expected]);
    });
    it("Should Log", () => {
        // const consoleSpy = jest.spyOn(console, "log");
        process.stdout.write = jest.fn();
        const expected = `     ${(0, util_1.dim)("┃")}        test                                                                    ${(0, util_1.dim)("┃")}\n`;
        (0, _1.blockLine)("test");
        expect(process.stdout.write).toHaveBeenCalledWith(expected);
    });
});
describe("Block Start", () => {
    beforeEach(() => {
        stdOutSpy.mockClear();
    });
    it("Should Render", () => {
        const expected = [
            "     \u001b[2m┏\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m┓\u001b[22m",
        ];
        expect((0, _1.createBlockHeader)()).toEqual(expected);
    });
    it("Should Log", () => {
        const expected = "     \u001b[2m┏\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m━\u001b[22m\u001b[2m┓\u001b[22m\n";
        (0, _1.blockHeader)();
        expect(process.stdout.write).toHaveBeenCalledWith(expected);
    });
});
describe("Block Line Types", () => {
    beforeEach(() => {
        stdOutSpy.mockClear();
    });
    it("Should Render - Success", () => {
        const expected = [
            `     ${(0, util_1.dim)("┃")}        ${(0, util_1.green)("✔")} My Victory                                                            ${(0, util_1.dim)("┃")}`,
        ];
        expect((0, _1.createBlockLineSuccess)("My Victory")).toEqual(expected);
    });
    it("Should Log - Success", () => {
        const expected = `     ${(0, util_1.dim)("┃")}        ${(0, util_1.green)("✔")} My Victory                                                            ${(0, util_1.dim)("┃")}\n`;
        (0, _1.blockLineSuccess)("My Victory");
        expect(process.stdout.write).toHaveBeenCalledWith(expected);
    });
});
describe("Blocks", () => {
    beforeEach(() => {
        stdOutSpy.mockClear();
    });
    it("Should Render - Block Line", () => __awaiter(void 0, void 0, void 0, function* () {
        const expected = `     ${(0, util_1.dim)("┃")}        test                                                                    ${(0, util_1.dim)("┃")}`;
        const result = yield (0, _1.createBlock)(blocks_model_1.BlockType.LINE, "test");
        expect(result).toEqual([expected]);
    }));
    it("Should Log - Block Line", () => {
        const expected = `     ${(0, util_1.dim)("┃")}        test                                                                    ${(0, util_1.dim)("┃")}\n`;
        (0, _1.block)(blocks_model_1.BlockType.LINE, "test");
        expect(process.stdout.write).toHaveBeenCalledWith(expected);
    });
});
//# sourceMappingURL=blocks.test.js.map